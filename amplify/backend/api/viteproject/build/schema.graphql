
type Room @aws_iam @aws_cognito_user_pools {
  id: ID!
  branchName: String
  branchId: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Message @aws_iam @aws_cognito_user_pools {
  id: ID!
  content: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelRoomConnection @aws_iam @aws_cognito_user_pools {
  items: [Room]!
  nextToken: String
}

input ModelRoomFilterInput {
  id: ModelIDInput
  branchName: ModelStringInput
  branchId: ModelStringInput
  and: [ModelRoomFilterInput]
  or: [ModelRoomFilterInput]
  not: ModelRoomFilterInput
}

type Query {
  getRoom(id: ID!): Room @aws_iam @aws_cognito_user_pools
  listRooms(filter: ModelRoomFilterInput, limit: Int, nextToken: String): ModelRoomConnection @aws_iam @aws_cognito_user_pools
  getMessage(id: ID!): Message @aws_iam @aws_cognito_user_pools
  listMessages(filter: ModelMessageFilterInput, limit: Int, nextToken: String): ModelMessageConnection @aws_iam @aws_cognito_user_pools
}

input ModelRoomConditionInput {
  branchName: ModelStringInput
  branchId: ModelStringInput
  and: [ModelRoomConditionInput]
  or: [ModelRoomConditionInput]
  not: ModelRoomConditionInput
}

input CreateRoomInput {
  id: ID
  branchName: String
  branchId: String
}

input UpdateRoomInput {
  id: ID!
  branchName: String
  branchId: String
}

input DeleteRoomInput {
  id: ID!
}

type Mutation {
  createRoom(input: CreateRoomInput!, condition: ModelRoomConditionInput): Room @aws_iam @aws_cognito_user_pools
  updateRoom(input: UpdateRoomInput!, condition: ModelRoomConditionInput): Room @aws_iam @aws_cognito_user_pools
  deleteRoom(input: DeleteRoomInput!, condition: ModelRoomConditionInput): Room @aws_iam @aws_cognito_user_pools
  createMessage(input: CreateMessageInput!, condition: ModelMessageConditionInput): Message @aws_iam @aws_cognito_user_pools
  updateMessage(input: UpdateMessageInput!, condition: ModelMessageConditionInput): Message @aws_iam @aws_cognito_user_pools
  deleteMessage(input: DeleteMessageInput!, condition: ModelMessageConditionInput): Message @aws_iam @aws_cognito_user_pools
}

input ModelSubscriptionRoomFilterInput {
  id: ModelSubscriptionIDInput
  branchName: ModelSubscriptionStringInput
  branchId: ModelSubscriptionStringInput
  and: [ModelSubscriptionRoomFilterInput]
  or: [ModelSubscriptionRoomFilterInput]
}

type Subscription {
  onCreateRoom(filter: ModelSubscriptionRoomFilterInput): Room @aws_subscribe(mutations: ["createRoom"]) @aws_iam @aws_cognito_user_pools
  onUpdateRoom(filter: ModelSubscriptionRoomFilterInput): Room @aws_subscribe(mutations: ["updateRoom"]) @aws_iam @aws_cognito_user_pools
  onDeleteRoom(filter: ModelSubscriptionRoomFilterInput): Room @aws_subscribe(mutations: ["deleteRoom"]) @aws_iam @aws_cognito_user_pools
  onCreateMessage(filter: ModelSubscriptionMessageFilterInput, owner: String): Message @aws_subscribe(mutations: ["createMessage"]) @aws_iam @aws_cognito_user_pools
  onUpdateMessage(filter: ModelSubscriptionMessageFilterInput, owner: String): Message @aws_subscribe(mutations: ["updateMessage"]) @aws_iam @aws_cognito_user_pools
  onDeleteMessage(filter: ModelSubscriptionMessageFilterInput, owner: String): Message @aws_subscribe(mutations: ["deleteMessage"]) @aws_iam @aws_cognito_user_pools
}

type ModelMessageConnection @aws_iam @aws_cognito_user_pools {
  items: [Message]!
  nextToken: String
}

input ModelMessageFilterInput {
  id: ModelIDInput
  content: ModelStringInput
  and: [ModelMessageFilterInput]
  or: [ModelMessageFilterInput]
  not: ModelMessageFilterInput
}

input ModelMessageConditionInput {
  content: ModelStringInput
  and: [ModelMessageConditionInput]
  or: [ModelMessageConditionInput]
  not: ModelMessageConditionInput
}

input CreateMessageInput {
  id: ID
  content: String!
}

input UpdateMessageInput {
  id: ID!
  content: String
}

input DeleteMessageInput {
  id: ID!
}

input ModelSubscriptionMessageFilterInput {
  id: ModelSubscriptionIDInput
  content: ModelSubscriptionStringInput
  and: [ModelSubscriptionMessageFilterInput]
  or: [ModelSubscriptionMessageFilterInput]
}

